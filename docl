#! /usr/bin/env lua

--- docl
-- Document and test your Lua scripts with 'docl'!
--
-- docl is available under a <a href=/docl/LICENSE.txt>MIT license</a>.
--
--- Usage
-- '"docl [-v] [-h] [-d OUTPUTDIR] [--lift LIFTFILE] FILES"'
--
-- Generate the documentation files. Creates files at
-- 'OUTPUTDIR/path.to.file.html' for every specified file and 'index.html'
-- file, containing a summary.
--
-- For example the documentation of 'src/plugins/vector.lua' would be placed
-- at 'docs/src.plugins.vector.lua.html'.
--
-- The default OUTPUTDIR is 'doc'.
--
--
--- Options
-- '"-v"'
--    show version number
--
-- '"-h"'
--    show a short help
--
-- '"-d OUTPUTDIR"'
--    specify a directory for the html documentation files.
--    default is 'doc'
--
-- '"--lift LIFTFILE"'
--    "lift" a specific file. eg. show its documentation on the index page.
--    you probably want to do that with the main file.
--
-- '"--show-source true"' '"--show-source false"'
--    include a button on every page to show the source of the documentation.
--    may be usefull, if some algorithms are easier to describe in code then
--    in words.
--
--
--- Note
--  docl names the documentation of files relative to the working directory.
--
--  if all files to be documented are inside a specific directory, you
--  should 'cd' (change-directory) there, before invoking 'docl'.
--
--  For example if you are at '/home/james/' and you call
--
--    'docl my-programs/my-app/src/lua/*.lua'
--
--  then docl will name the output files 'my-programs.my-app.src.lua.*.lua.html'
--  (which is pretty dumb).
--
--  if you want them to be called only *.lua.html simply 'cd' (change the
--  directory) before invoking docl.
--
--    'cd /home/james/my-programs/my-app/src/lua; docl *.lua'
--
--  then docl will name the output files '*.lua.html' which is much better.
--
--- Examples
-- Here are some usage examples:
--
-- './docl *.lua'
--
-- document all .lua files in this directory
--
-- './docl *.lua */*.lua'
--
-- document all .lua files in this directory and all subdirectories
-- (but not recursive!)
--
-- './docl -d html-doc $$((find -name "*.lua"))'
--
-- recursively document all files ending in .lua and put output into 'html-doc/'
--

help = [[
NAME
  docl - Document your Lua Scripts with DocL!

SYNOPSIS
  docl [-v] [-h] [-d OUTPUTDIR] [-lift LIFTFILE] FILES

  This will create the dir OUTPUTDIR (default is 'doc/') and for every
  supplied file a file 'path.to.file.html' .

OPTIONS
  -v  show version number
  -h  show this help
  -d <dir>
      specify output directory
  --lift <file>
      lift a specific file. eg. show its documentation on the index page.
      you probably want to do that with the 'main' file.

NOTE
  For more information please look at the docl generated HTML Documentation
  at file://]] .. arg[0] .. [[/html-doc/index.html.
]]

local function does_directory_exist(dir)
  local f = io.open(dir .. "/index.html", "r")
  local content = ""
  if f then
    content = f:read("*a")
    f:close()
  end

  local f = io.open(dir .. "/index.html", "w")
  if not f then
    print("ERROR: the directory '" .. dir .. "' does not exist.")
    print("  please create it by executing 'mkdir " .. dir .. "'")
    return false

  else 
    f:write(content)
    f:close()
    return true
  end

end


local function parse_shell_options ()
  local files, kwarg = {}, nil
  for i,word in ipairs(arg) do
    if kwarg then
      if kwarg == "d" then
        outputdir = word

      elseif kwarg == "-lift" then
        liftfile = word
        files[#files+1] = word

      elseif kwarg == "-show-source" then
        if word == "true" then
          options.show_source = true
        elseif word == "false"
          options.show_source = false
        else
          print("ERROR: unknown option --show-source '" .. word .. "')
          print("expected 'true' or 'false'")
        end
      end
      kwarg = nil

    else
      if word:sub(1,1) == "-" then
        kwarg = word:sub(2)
        if kwarg == "h" or kwarg == "v" then
          print("ERROR: option '" .. kwarg .. "' has to be the only option.")
          return {err=true}

        elseif kwarg == "d" then
        elseif kwarg == "-lift" then
        elseif kwarg == "-show-source" then

        else
          print("WARNING: ignoring unkown argument -" .. kwarg)
          print()
          print("Please help yourself by typing 'docl.lua -h'")
        end

      else
        files[#files+1] = word
      end
    end
  end

  if outputdir == nil then
    print("WARNING: missing option '-d', default is '-d doc'")
    outputdir = "doc"
  end

  if options.show_source == nil then
    print("WARNING: missing option '--show-source' / '--hide-source', default is '--show-source'")
    options.show_source = true
  end

  if not does_directory_exist(outputdir) then
    return {err=true}
  end

  outputdir = outputdir .. "/"
  return {outputdir=outputdir, files=files}
end



if #arg == 0 or arg[1] == "-h" then
  print(help)

elseif #arg == 0 or arg[1] == "-v" then
  print("This docl version 1.1 - have fun!")

else
  local docldir, file = arg[0]:match'(.*/)(.*)'
  local outputdir = nil

  package.path = docldir .. "?.lua;" .. package.path
  local doc = require "doc"

  -- parse shell options and arguments
  local options = parse_shell_options()

  local links = {}

  -- do your thing
  if not options.err then
    local toc = {}
    for i,file in ipairs(options.files) do

      print("gen_file " .. file)
      sections = doc.parse_file(file, links, options.show_source)
      result = doc.gen_file(sections)

      if file == liftfile then
        theliftfile = {sections=sections, result=result}

      elseif result ~= false then
        local output = file:gsub("/", ".")
        local f = io.open(options.outputdir .. output .. ".html", "w")
        f:write(result)
        f:close()

        table.insert(toc, {"<a href='" .. output .. ".html'>" .. output .. "</a>",
            sections[1].first and sections[1].first.first or ""})

      else
        print("  NO DOCS FOR " .. file)
      end
    end


    local content, navigation = "", ""

    if theliftfile then
      for i, section in ipairs(theliftfile.sections) do
        local description = theliftfile.sections[i].first or {}
        local title = description.first

        local function content_template(section)
          return doc.wrap(
            table.concat(doc.map(section, function(def)
              return doc.def_template(def.first, "<p>"..table.concat(def, "\n"):gsub("\n\n", "</p><p>").."</p>" ) end
            ))
          , "dl")
        end
        local function nav_template(section)
          return doc.wraps(
            doc.map(section, function(x)
              return "<a href=#" .. x.first:sub(1, (x.first:find(" ") or 1)-1) .. ">" .. x.first .. "</a>"
            end)
          , "li")
        end

        content = content
          .. doc.wrap(title, i==1 and "h1" or "h2")
          .. "<p>"..table.concat(description, "\n"):gsub("\n\n", "</p><p>").."<p>"
          .. content_template(section)

        navigation = navigation
          .. doc.wrap(title, i==1 and "h2" or "h3")
          .. nav_template(section)
      end
    end

    content = content .. doc.wrap(liftfile and "Modules" or "Content", "h2")
      .. "<table></body>" .. doc.wraps(doc.map(toc, function (x) return doc.wraps(x, "td") end), "tr") .. "</tbody></table>"

    navigation = navigation .. doc.wrap(liftfile and "Modules" or "Content", "h2")
      .. "<ul id=main-list>" .. doc.wraps(doc.map(toc, function (x) return x[1]
        .. "<div style='margin: 0 1em 1em; font-size: .9em;'>" .. x[2] .. "</div>" end), "li") .. "</ul>"

    local file = io.open(options.outputdir .. "index.html", "w")
    file:write( doc.file_template(content, navigation) )

    file:close()

    local filestable = {}
    for i,e2 in ipairs(options.files) do
      filestable[e2:gsub("/", ".")] = true
    end
    for i,e in ipairs(links) do
      local url, hash = e.url:match'(.*)%.html#(.*)'
      if not filestable[url] then
        print("ERROR in File " .. e.file .. " in line " .. e.line .. ": " .. url .. "#" .. hash)
      end
    end
  end
  
end
