#! /usr/bin/env lua

local docldir, file = arg[0]:match'(.*/)(.*)'
package.path = docldir .. "?.lua;" .. package.path
package.path = docldir .. "src/?.lua;" .. package.path

--- Command line interface
--[[return (require "help").webhelp
]]--@INSERT_AS_TEXT
--
-- <h2>Note</h2>
--
-- Docl names the documentation of files relative to the working directory.
--
-- If all files to be documented are inside a specific directory, you
-- should change your directory there, before invoking docl.
--
-- For example if you are at '/home/james/' and you call
--[[
$ docl my-programs/my-app/src/lua/*.lua
]]
-- then docl will name the output files 'my-programs.my-app.src.lua.*.lua.html'
-- (which is pretty dumb).
--
-- if you want them to be called only '*.lua.html' change the
-- directory before invoking docl.
--[[
$ cd my-programs/my-app/src/lua
$ docl *.lua
]]
--
-- <h2>Examples</h2>
--
--[[./docl *.lua
]]
-- document all .lua files in this directory
--
--[[./docl *.lua */*.lua
]]
-- document all .lua files in this directory and all subdirectories
-- (but not recursive!)
--
--[[./docl -d html-doc $$((find -name "*.lua"))
]]
-- recursively document all files ending in .lua and put output into 'html-doc/'

local help = require "help"
local doc  = require "doc"
local opt  = require "parseopt"
local myio = require "myio"

local function handle_shell_options ()
  local options = opt.parse(arg, help.default_options)
  if not options then return end

  if options._v then
    print("This docl version 1.3 - have fun!")
    return
  end

  if options._h then
    print(help.terminalhelp)
    return
  end

  ok, err = pcall(opt.apply_defaults, options, help.default_options, help.allowed_args, true)
  if not ok then
    print("ERROR: " .. err.msg)
    return
  end
  
  if not myio.is_dir(options.__dir) then
    print("ERROR: the directory '" .. options.__dir .. "' does not exist. Please")
    print(" * create it by executing 'mkdir " .. options.__dir .. "', or")
    print(" * choose another output-directory by supplying the option '--dir OUTPUTDIR'")
    return
  end
  options.__dir = options.__dir .. "/"

  return options -- success
end



-- parse shell options and arguments
local options = handle_shell_options()

-- do your thing
if options then
  local links = {}
  local toc = {}
  local theliftfile

  for i, file in ipairs(options) do
    if file ~= options.__lift then
      print("* " .. file)
      local sections = doc.parse_file(file, links, options)
      local result = doc.gen_file(sections, options)

      local path = file:gsub("/", ".")
      myio.write(options.__dir .. path .. ".html", result)

      local desc = sections[1].first and sections[1].first.first or ""
      table.insert(toc, {path, desc})
    end
  end

  local content, navigation = "", ""
  if not theliftfile and options.__lift then
    print("* " .. options.__lift)
    local sections = doc.parse_file(options.__lift, links, options)
    content, navigation = doc.sections2html(sections, options)
  end

  htmltoc = doc.wrap(options.__lift and "Modules" or "Content", "h2")
    .. doc.wrap(table.concat(doc.map(toc, function (x) return
        ("<li><a class=list-link href='%s.html'><div>%s</div><div>%s</div></a></li>")
          :format(x[1], x[1], x[2])
      end), "\n  "),
      "ul", " id=content-list style=list-style:none;padding:0")

  content = content .. htmltoc
  navigation = navigation .. htmltoc

  myio.write(options.__dir .. "index.html",
    doc.file_template(content, navigation, title or "", options))

  local filestable = {}
  for i,e2 in ipairs(options) do
    filestable[e2:gsub("/", ".")] = true
  end
  for i,e in ipairs(links) do
    local url, hash = e.url:match'(.*)%.html#(.*)'
    if not filestable[url] then
      print("WARNING: broken link in file " .. e.file .. ":" .. e.line .. " to " .. url .. "#" .. hash)
    end
  end

  if not myio.exists(options.__dir .. "style.css") then
    print("created style.css")
    myio.copy(docldir .. "data/style.css", options.__dir .. "docl.css")
  end

  if options.__highlight == "js" then
    print("created highlight.js")
    myio.copy(docldir .. "data/highlight.js", options.__dir .. "highlight.js")
  end
end

