#! /usr/bin/env lua

--- docl
-- Document and test your Lua scripts with 'docl'!
--
--- Usage
-- '"docl [-v] [-h] [-d OUTPUTDIR] [--lift LIFTFILE] FILES"'
--
-- This will generate an documentation files
--  * 'OUTPUTDIR/path.to.file.html' for every specified file and
--  * an 'index.html' file, containing a summary.
--
-- The default OUTPUTDIR is 'docs/'.
--
-- For example the documentation of 'src/plugins/vector.lua' would be placed
-- at 'docs/src.plugins.vector.lua.html'.
--
--- Options
-- '"-v"'
--    show version number
--
-- '"-h"'
--    show a short help
--
-- '"-d OUTPUTDIR"'
--
--    specify a directory for the html documentation files.
--    default is 'docs/'
--
-- '"--lift LIFTFILE"'
--
--    "lift" a specific file. eg. show its documentation on the index page.
--    you probably want to do that with the main file.
--
--- Note
--  docl names the documentation of files relative to the working directory.
--  if all files to be documented are inside a specific directory, you
--  should simply 'cd' (change-directory) there, before invoking 'docl'.
--
--  For example if you are at /home/james/ and you call
--
--    'docl my-programs/my-app/src/lua/*.lua'
--
--  then docl will name the output files 'my-programs.my-app.src.lua.*.lua.html'
--  (which is pretty dumb).
--
--  if you want them to be called only *.lua.html simply 'cd' (change the
--  directory) before invoking docl.
--
--    'cd /home/james/my-programs/my-app/src/lua; docl *.lua'
--
--  then docl will name the output files 'my-app.*.lua.html' which is pretty
--  smart.
--
--- Examples
-- Here are some usage examples:
--
-- './docl *.lua'
--
-- document all .lua files in this directory
--
-- './docl *.lua */*.lua'
--
-- document all .lua files in this directory and all subdirectories
-- (but not recursive!)
--
-- './docl -o doc $$((find -name "*.lua"))'
--
-- recursively document all files ending in .lua and put output into doc/
--

help = [[
NAME
  docl - Document your Lua Scripts with DocL!

SYNOPSIS
  docl [-v] [-h] [-d OUTPUTDIR] [-lift LIFTFILE] FILES

  This will create the dir OUTPUTDIR (default is 'docs/') and for every
  supplied file a file 'path.to.file.html' .

OPTIONS
  -v  show version number
  -h  show this help
  -d <dir>
      specify output directory
  --lift <file>
      lift a specific file. eg. show its documentation on the index page.
      you probably want to do that with the 'main' file.

NOTE
  For more information please look at the docl generated HTML Documentation
  at file://]] .. arg[0] .. [[/html-doc/index.html.
]]

if #arg == 0 or arg[1] == "-h" then
  print(help)

elseif #arg == 0 or arg[1] == "-v" then
  print("This docl version 1.1 - have fun!")

else
  origdir = io.popen("pwd"):read() .. "/"
  docldir, file = arg[0]:match'(.*/)(.*)'
  package.path = docldir .. "?.lua;" .. package.path
  outputdir = origdir .. "docs/"

  local doc = require "doc"

  -- parse shell options and arguments
  local files, kwarg, err = {}, nil, false
  for i,word in ipairs(arg) do
    if kwarg then
      if kwarg == "d" then
        outputdir = word

      elseif kwarg == "-lift" then
        liftfile = word
        files[#files+1] = word
      end
      kwarg = nil

    else
      if word:sub(1,1) == "-" then
        kwarg = word:sub(2)
        if kwarg == "h" or kwarg == "v" then
          err = true
          print("ERROR: option '" .. kwarg .. "' has to be the only option.")

        elseif kwarg == "d" then
        elseif kwarg == "-lift" then

        else
          err = true
          print("ERROR: unkown argument -" .. kwarg)
          print()
          print("Please help yourself by typing 'docl.lua -h'")
          break
        end

      else
        files[#files+1] = word
      end
    end
  end

  -- do your thing
  if not err then
--    if io.open(outputdir) then
--    os.execute("mkdir -p " .. outputdir)
--    os.execute("cp -n " .. docldir .. "style.css " .. outputdir .. "/")

      local t = {}
      for i,file in ipairs(files) do

        print("gen_file " .. file)
        sections = doc.parse_file(file)
        result = doc.gen_file(sections)

        if file == liftfile then
          theliftfile = {sections=sections, result=result}

        elseif result ~= false then
            local output = file:gsub("/", ".")
            local f = io.open(outputdir .. "/" .. output .. ".html", "w")
            f:write(result)
            f:close()

            table.insert(t, "<li><a href='" .. output .. ".html'>" .. output .. "</a><div style='margin: 0 1em 1em; font-size: .9em;'>"
                .. (sections[1].first and sections[1].first.first or "") .. "</div></li>")

        else
          print("  NO DOCS FOR " .. file)
        end
      end


      local content, navigation = "", ""

      if theliftfile then
        for i, section in ipairs(theliftfile.sections) do
            local description = theliftfile.sections[i].first or {}
            local title = description.first

            local function content_template(section)
                return doc.wrap(
                    table.concat(doc.map(section, function(def)
                        return doc.def_template(def.first, "<p>"..table.concat(def, "\n"):gsub("\n\n", "</p><p>").."</p>" ) end
                    ))
                , "dl")
            end
            local function nav_template(section)
                return doc.wraps(
                    doc.map(section, function(x)
                        return "<a href=#" .. x.first:sub(1, (x.first:find(" ") or 1)-1) .. ">" .. x.first .. "</a>"
                    end)
                , "li")
            end

            content = content
                .. doc.wrap(title, i==1 and "h1" or "h2")
                .. "<p>"..table.concat(description, "\n"):gsub("\n\n", "</p><p>").."<p>"
                .. content_template(section)

            navigation = navigation
                .. doc.wrap(title, i==1 and "h2" or "h3")
                .. nav_template(section)
        end
      end

      content = content .. doc.wrap(liftfile and "Subcontent" or "Content", "h2") .. "<ul id=main-list>" .. table.concat(t) .. "</ul>"
      navigation = navigation .. doc.wrap(liftfile and "Subcontent" or "Content", "h2") .. "<ul>" .. table.concat(t) .. "</ul>"

      local file = io.open(outputdir .. "/index.html", "w")
      file:write( doc.file_template(content, navigation) )

      file:close()
--    end
  end
end
